grammar Primitive
  rule primitive
    (string | float | bool | array | datetime)
  end

  rule array
    '[' space? (primitive (',' space? primitive)*)* space? ']'
  end

  rule string
    ('"' word ( [\s] word)* '"') { eval(self) }
  end

  rule bool
    'true' | 'false'
  end

  rule word
    [a-zA-Z]+
  end

  # Full Zulu form
  rule datetime
    ( y:/\d\d\d\d/ "-" m:/\d\d/ "-" d:/\d\d/ "T" h:/\d\d/ ":" mi:/\d\d/ ":" s:/\d\d/ "Z" ) {
      Time.utc( *[y,m,d,h,mi,s].map(&:value))
    }
  end

  rule float
    sign? integer ('.' integer)?
  end

  rule integer
    sign? [0-9]+
  end

  rule sign
    ('+' | '-')
  end

  rule space
    [ \t]*
  end
end

grammar Toml
  include Primitive

  rule comment
    (space? "#" comment:(.)*) { comment }
  end

  rule keygroup
    ( space? '[' word ']' space? comment?) { word.value }
  end

  rule keyvalue
    (space? word space? '=' space? (datetime | string | bool | float | array ) space? comment? ) {
      def key
        word
      end

      def val
        datetime ? datetime.value : eval(string || bool || float || array)
      end

      def value
        Hash[word.value, val]
      end
    }
  end
end

