grammar Primitive
  rule primitive
    string | bool | datetime | number
  end

  rule string
    ('"' word ( [\s] word)* '"') { eval(self) }
  end

  rule bool
    true | false
  end

  # Full Zulu form
  rule datetime
    (y:/\d\d\d\d/ "-" m:/\d\d/ "-" d:/\d\d/ "T" h:/\d\d/ ":" mi:/\d\d/ ":" s:/\d\d/ "Z") {
      Time.utc(*[y,m,d,h,mi,s].map(&:value))
    }
  end

  rule number
    float | integer
  end

  rule float
    (integer ('.' integer)?) { to_f }
  end

  rule integer
    (sign? [0-9]+) { to_i }
  end

  rule sign
    '+' | '-'
  end

  rule word
    [a-zA-Z]+
  end

  rule space
    [ \t]*
  end

  rule true
    'true' { true }
  end

  rule false
    'false' { false }
  end
end

grammar Arrays
  include Primitive

  rule array
    ("[" space? (float_array | string_array | array_array )* space? "]") { eval(self) }
  end

  rule float_array
    (float ("," space? float)*)
  end

  rule string_array
    (string ("," space? string)*)
  end

  rule array_array
    (array ("," space? array)*)
  end
end

grammar Toml
  include Primitive
  include Arrays

  rule comment
    (space? "#" comment:(.)*) { comment }
  end

  rule keygroup
    (space? '[' word ']' space? comment?) { word.value }
  end

  rule keyvalue
    (space? word space? '=' space? v:(primitive | array) space? comment?) {
      def key
        word
      end

      def val
        v.value
      end

      def value
        Hash[word.value, val]
      end
    }
  end
end

